# -*- coding: utf-8 -*-
"""SentimentanalysisTool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WKXzCzpWaC5coqm4NGgR8YqXN2HNl3Nu
"""

import pandas as pd
import numpy as np



match=pd.read_csv('matches.csv')
delivery=pd.read_csv('deliveries.csv')

delivery.shape

delivery.head(2)

delivery=delivery.iloc[1::2].reset_index(drop=True)

total_score_df=delivery.groupby(['Match_id','Inning']).sum()['total_runs'].reset_index()

total_score_df.shape

total_score_df=total_score_df[total_score_df['Inning']==1]

match_df=match.merge(total_score_df[['Match_id','total_runs']],left_on='Match_id',right_on='Match_id')

teams = [
    'Sunrisers Hyderabad',
    'Mumbai Indians',
    'Royal Challengers Bangalore',
    'Kolkata Knight Riders',
    'Kings XI Punjab',
    'Chennai Super Kings',
    'Rajasthan Royals'
]

match_df['team1'] = match_df['team1'].str.replace('Delhi Daredevils','Delhi Capitals')
match_df['team2'] = match_df['team2'].str.replace('Delhi Daredevils','Delhi Capitals')

match_df['team1'] = match_df['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')
match_df['team2'] = match_df['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')

match_df = match_df[match_df['team1'].isin(teams)]
match_df = match_df[match_df['team2'].isin(teams)]

match_df

match_df = match_df[match_df['dl_applied']=='0']

match_df

match_df = match_df[['Match_id','city','winner','total_runs']]

match_df.head()

delivery_df = match_df.merge(delivery, on = 'Match_id')

delivery_df=delivery_df[delivery_df['Inning']==1]

delivery_df

delivery_df['total_runs_y'].dtypes

delivery_df['current_score']=delivery_df.groupby('Match_id')['total_runs_y'].cumsum()

delivery_df['runs_left']=delivery_df['total_runs_x']-delivery_df['current_score']+1

delivery_df['balls_left']=126-(delivery_df['Over']*6+delivery_df['delivery'])

delivery_df['player_dismissed'] = delivery_df['player_dismissed'].replace(' ', '0')

delivery_df['player_dismissed']=delivery_df['player_dismissed'].apply(lambda x:x if x=='0' else '1')
delivery_df['player_dismissed']=delivery_df['player_dismissed'].astype('int')

wickets = delivery_df.groupby('Match_id')['player_dismissed'].cumsum()
delivery_df['wickets'] = 10 - wickets

delivery_df.head(1)

delivery_df['crr']=(delivery_df['current_score']*6)/(120-delivery_df['balls_left'])

delivery_df['rrr']=delivery_df['runs_left']*6/delivery_df['balls_left']

def result(row):
  return 1 if row['Batting_team']==row['winner'] else 0

delivery_df['result']=delivery_df.apply(result, axis=1)

delivery_df[['Batting_team', 'Bowling_team', 'city', 'runs_left', 'balls_left', 'wickets', 'total_runs_x', 'crr', 'rrr', 'result']]

final_df=delivery_df[['Batting_team', 'Bowling_team', 'city', 'runs_left', 'balls_left', 'wickets', 'total_runs_x', 'crr', 'rrr', 'result']]

final_df=final_df.sample(final_df.shape[0])

final_df = final_df[final_df['balls_left']!=0]

X = final_df.iloc[:, :-1]
y = final_df.iloc[:, -1]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

trf = ColumnTransformer([
    ('trf', OneHotEncoder(sparse=False,drop = 'first'), ['Batting_team', 'Bowling_team', 'city'])
], remainder='passthrough')

from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline

pipe = Pipeline(steps=[
    ('step1', trf),
    ('step2', RandomForestClassifier())
])

pipe.fit(X_train, y_train)

y_pred = pipe.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)

